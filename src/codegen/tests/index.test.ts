// import fs from 'fs-extra';
import path from 'path';
import dedent from 'dedent';
import { createTypegingForBuilders, generateTypedApiFromPath } from '..';
import { Builder } from '../../builder'

describe('Codegen', () => {
    it('should throw when file doesnt exist', async () => {
      const inOutConfig = {
        input: path.resolve(__dirname, './ljdskfhlkjshdfkjasdf'),
      };

      await expect(generateTypedApiFromPath.bind(null, inOutConfig)).rejects.toThrow();
    })

    it('should emit file when file doesnt exist', async () => {
      const inOutConfig = {
        input: path.resolve(__dirname, './example/fixtures'),
      };

      await generateTypedApiFromPath(inOutConfig);
      
    })

    it('should create a typeging for builders', async () => {
      const inOutConfig = {
        input: path.resolve(__dirname, './example/fixtures'),
      };

      const typings = await createTypegingForBuilders(inOutConfig, [
        Builder.register(
          ({ the }) => the.man.is.alive(Boolean).and.well(Boolean),
          (isAlive: Boolean, isWell: Boolean) => 'First',
        ),
      
        Builder.register(
          ({ the }) => the(Boolean).and.well(Boolean),
          (isAlive: Boolean, isWell: Boolean) => 'Second',
        )
      ]);

      expect(typings).toEqual(dedent`
        /* ------------------------------------
        *  Generated by chai-latte
        *  Please do not edit this file directly
        *  Instead, edit the file './fixtures'
        * ------------------------------------
        */

        import builder from './fixtures';
        
        type Expressions = typeof builder.__expressions;
        type ExpressionCallback<Idx extends number> = Expressions[Idx]['callback'];
        type Arg<Idx extends number, ArgIndex extends number> = Parameters<ExpressionCallback<Idx>>[ArgIndex];
        type Return<Idx extends number> = ReturnType<ExpressionCallback<Idx>>;
        
        type Root = {}
          & { the: { man: { is: { alive: { (isAlive: Arg<0, 0>) : { and: { well: { (isWell: Arg<0, 1>) : Return<0>; }; } }; }; }; }; }; }
          & { the: { (isAlive: Arg<1, 0>) : { and: { well: { (isWell: Arg<1, 1>) : Return<1>; }; } }; }; };

        export default builder as unknown as Root;
      `)
    })
});
 